---

- name: Create a homebox directory to store any specific configuration
  tags: system-prepare
  file:
    path: /etc/homebox
    state: directory
    mode: 0755

# Update packages cache, and install any security update
- name: Update packages cache and install security updates
  tags: security
  apt:
    upgrade: yes
    cache_valid_time: 86400

# We are going to install the "unattended-upgrades" package, and to
# configure it to install security updates automatically.
- name: Configure the automatic security updates
  tags: security
  debconf:
    name: unattended-upgrades
    question: '{{ conf.question }}'
    value: '{{ conf.value }}'
    vtype: '{{ conf.type }}'
  with_items:
    - question: unattended-upgrades/origins_pattern
      value: 'origin=Debian,codename=${distro_codename},label=Debian-Security'
      type: string
    - question: unattended-upgrades/enable_auto_updates
      value: '{{ security.auto_update }}'
      type: boolean
  loop_control:
    loop_var: conf

# Install the firewall, but do not configure any rule.
# The other tasks will setup the rules themselves
# We are also installing fail2ban, so the other services might use it, like postfix, dovecot and roundcube
# The package 'unattended-upgrades' download and install security updates by default

- name: Install ufw / fail2ban and automatic security updates
  tags: security
  apt:
    name: "{{ pkg }}"
    state: installed
  with_items:
    - unattended-upgrades
    - ufw
    - fail2ban
    - rblcheck
  loop_control:
    loop_var: pkg

- name: Configure the firewall for SSH access
  tags: security
  ufw:
    proto: tcp
    rule: '{{ firewall.ssh.rule }}'
    src: '{{ firewall.ssh.from }}'
    port: 22
    comment: Allow SSH access
    state: enabled

- name: Install AppArmor packages
  when: security.app_armor
  tags: security
  apt:
    name: '{{ pkg }}'
    state: latest
  with_items:
    - apparmor
    - apparmor-profiles
    - apparmor-utils
  loop_control:
    loop_var: pkg

- name: Enable AppArmor at boot
  register: grub_config
  when: security.app_armor
  tags: security
  replace:
    path: /etc/default/grub
    regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="([^"]*)"'
    replace: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 apparmor=1 security=apparmor"'

# AppArmor will be enabled on the next reboot
- name: Update grub
  when: grub_config.changed
  command: update-grub2

- name: Enable AppArmor service
  register: aa_service
  when: security.app_armor
  tags: security
  service:
    name: apparmor
    enabled: true

- name: Reboot to activate AppArmor if not already active
  when: security.app_armor and aa_service.changed
  tags: security, apparmor
  shell: systemctl reboot --message "Restarting the system to activate AppArmor"
  async: 1
  poll: 0

- name: Wait for the server to come back online
  when: security.app_armor and aa_service.changed
  tags: security
  local_action:
    module: wait_for_connection
    host: '{{ ansible_ssh_host }}'
    port: 22
    state: started    
    delay: 30
    sleep: 10
    timeout: 180
  
