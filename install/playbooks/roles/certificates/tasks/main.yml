---

- name: Create a directory for certificates backup if it does not exists
  tags: cert
  delegate_to: localhost
  file:
    path: '{{ playbook_dir }}/../../backup/certificates/'
    state: directory

- name: If the certificates have been generated before, copy them on the remote server
  tags: cert
  synchronize:
    src: '{{ playbook_dir }}/../../backup/certificates/'
    dest: /etc
    owner: no
    group: no
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--checksum'
      - '--exclude=readme.md'

- name: Check if the certificate has been copied from a previous backup
  tags: cert
  register: cert_stat
  stat:
    path: "/etc/letsencrypt/live/{{ certificate.type }}.{{ network.domain }}/cert.pem"

- name: Check if nginx has been already installed
  tags: cert
  register: nginx_stat
  stat:
    path: /usr/sbin/nginx

- name: Stop the nginx server if installed
  when: nginx_stat.stat["exists"] == True and cert_stat.stat["exists"] == False
  register: nginx_state
  tags: cert
  service:
    name: nginx
    state: stopped

- name: Open the port 80 if necessary
  when: cert_stat.stat["exists"] == False
  tags: security
  register: ufw_http
  ufw:
    proto: tcp
    rule: limit
    src: any
    port: 80
    comment: Allow LetsEncrypt temporarily

# The certbot package need to be installed
- name: Create the certificate
  tags: cert
  when: system.ssl == 'letsencrypt' and cert_stat.stat["exists"] == False
  command: >-
    /usr/bin/certbot certonly
    --non-interactive
    --standalone
    --domain "{{ certificate.type }}.{{ network.domain }}"
    --email "admin@{{ network.domain }}"
    --agree-tos
  args:
    creates: "/etc/letsencrypt/live/{{ certificate.type }}.{{ network.domain }}/cert.pem"
    
- name: Remove the firewall rule if it has been added
  tags: security
  when: ufw_http.changed and cert_stat.stat["exists"] == False
  ufw:
    proto: tcp
    rule: limit
    src: any
    port: 80
    delete: yes
    comment: Allow LetsEncrypt temporarily

- name: Restart the nginx server if installed and previously stopped
  when: nginx_stat.stat["exists"] == True and nginx_state.changed and cert_stat.stat["exists"] == False
  tags: cert
  service:
    name: nginx
    state: started

- name: Backup the certificates on your local machine
  tags: cert
  synchronize:
    mode: pull
    src: /etc/letsencrypt
    dest: '{{ playbook_dir }}/../../backup/certificates/'
    perms: yes
