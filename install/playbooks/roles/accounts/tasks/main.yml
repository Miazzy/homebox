---

# Pre-configure the LDAP sever before instaling
- name: Configure the LDAP administration account
  tags: ldap
  debconf:
    name: slapd
    question: '{{ item }}'
    value: '{{ ldap.admin.password }}'
    vtype: string
  with_items:
    - slapd/password1
    - slapd/password2

- name: Configure the LDAP organization
  tags: ldap
  debconf:
    name: slapd
    question: '{{ item }}'
    value: '{{ ldap.organization.domain }}'
    vtype: string
  with_items:
    - shared/organization
    - slapd/domain

# Install LDAP server
- name: Install the required packages
  tags: ldap
  apt:
    name: '{{ item }}'
    state: installed
  with_items:
    - slapd
    - python-ldap
    - python-passlib

- name: Make sure we have a parent entry for users
  tags: ldap
  ldap_entry:
    dn: '{{ ldap.users.dn }}'
    objectClass: organizationalUnit
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw: '{{ ldap.admin.password }}'
    state: present

- name: Make sure we have a parent entry for groups
  tags: ldap
  ldap_entry:
    dn: '{{ ldap.groups.dn }}'
    objectClass: organizationalUnit
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw: '{{ ldap.admin.password }}'
    state: present

- name: Remove old groups if presents
  tags: ldap,clean
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ group.gid }},{{ ldap.groups.dn }}'
    state: absent
  with_items:
    - '{{ posix_groups }}'
  loop_control:
    loop_var: group

- name: Create all the group accounts
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ group.gid }},{{ ldap.groups.dn }}'
    attributes:
      cn:  '{{ group.description }}'
      gidNumber: '{{ group.gidNumber }}'
    objectClass:
      - top
      - posixGroup
  with_items:
    - '{{ posix_groups }}'
  loop_control:
    loop_var: group

# Create LDAP user accounts
- name: Remove previous users
  tags: ldap,clean
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ user.uid }},{{ ldap.users.dn }}'
    state: absent
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Create all the user accounts
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ user.uid }},{{ ldap.users.dn }}'
    state: present
    attributes:
      uid: '{{ user.uid }}'
      givenName: '{{ user.first_name }}'
      sn: '{{ user.last_name }}'
      # userPassword: "{{ user.password | password_hash('ldap_md5_crypt') }}"
      userPassword: "{{ user.password }}"
      homeDirectory: '/home/{{ user.group }}/{{ user.uid }}'
      loginShell: '{{ user.shell }}'
      uidNumber: '{{ user.uidNumber }}'
      gidNumber: '{{ user.gidNumber }}'
      mail: '{{ user.mail }}'
      shadowMin: 0
      shadowMax: 999999
      shadowWarning: 7
      shadowInactive: -1
      shadowFlag: 0
    objectClass:
      - top
      - person
      - posixAccount
      - shadowAccount
      - inetOrgPerson
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Add all users to the mail group
  user:
    name: '{{ user.uid }}'
    groups: mail
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Configure libnss to use passwords and groups
  tags: ldap
  debconf:
    name: libnss-ldap
    question: 'libnss-ldapd/nsswitch'
    value: 'passwd, group, shadow'
    vtype: multiselect

- name: Install the required packages for interactive login
  when: options.accounts.login == true
  tags: ldap
  apt:
    name: '{{ item }}'
    state: installed
  with_items:
    - libnss-ldapd
    - libpam-ldapd

- name: Update the ldap configuration file    
  when: options.accounts.login == true
  register: config
  tags: ldap
  replace:
    path: /etc/nslcd.conf
    regexp: '{{ item.regex }}'
    replace: '{{ item.value }}'
    mode: 0600
  with_items:
    - regex: '^#?uri ldap.?://.*'
      value: 'uri ldap://127.0.0.1:389/'
    - regex: '^#?base .*'
      value: 'base {{ ldap.organization.base }}'
    - regex: '^#?scope .*'
      value: 'scope sub'
    - regex: '^#?\s?rootpwmoddn .*'
      value: 'rootpwmoddn {{ ldap.admin.dn }}'
    - regex: '^#?\s?rootpwmodpw .*'
      value: 'rootpwmodpw {{ ldap.admin.password }}'

- name: Restart the nslcd service
  when: config.changed
  tags: ldap
  service:
    name: nslcd
    state: restarted

- name: Create home directory for users on first login
  when: options.accounts.login == true
  tags: ldap
  lineinfile:
    dest: /etc/pam.d/common-account
    line: 'session    required    pam_mkhomedir.so skel=/etc/skel/ umask=0022'
