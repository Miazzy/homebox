---

# Pre-configure the LDAP sever before instaling
- name: Configure the LDAP administration account
  tags: ldap
  debconf:
    name: slapd
    question: '{{ conf.question }}'
    value: '{{ conf.value }}'
    vtype: '{{ conf.type }}'
  with_items:
    - question: slapd/password1
      value: '{{ ldap.admin.password }}'
      type: password
    - question: slapd/password2
      value: '{{ ldap.admin.password }}'
      type: password
    - question: slapd/internal/adminpw
      value: '{{ ldap.admin.password }}'
      type: password
    - question: slapd/internal/generated_adminpw
      value: '{{ ldap.admin.password }}'
      type: password
    - question: slapd/purge_database
      value: true
      type: boolean
    - question: slapd/invalid_config
      value: false
      type: boolean
    - question: shared/organization
      value: '{{ ldap.organization.domain }}'
      type: string
    - question: slapd/domain
      value: '{{ ldap.organization.domain }}'
      type: string
    - question: slapd/backend
      value: 'MDB'
      type: select
    - question: slapd/move_old_database
      value: true
      type: boolean
    - question: slapd/unsafe_selfwrite_acl
      value: false
      type: boolean
    - question: slapd/password_mismatch
      value: false
      type: boolean
  loop_control:
    loop_var: conf

# Install LDAP server
- name: Install the required packages
  tags: ldap
  apt:
    name: '{{ item }}'
    state: installed
  with_items:
    - acl
    - slapd
    - python-ldap
    - python-passlib
    - ldapscripts

################################################################################
# At this point, the certificates should have been created already #############
# in order to have SSL and TLS encryption activated.                           #
- name: Allow slapd and nslcd daemons to access the certificate directories
  when: system.ssl == 'letsencrypt'
  tags: ldap,ssl
  vars:
    details:
      - [ /etc/'letsencrypt'/archive, /etc/'letsencrypt'/live ]
      - [ openldap, nslcd ]
  acl:
    path: '{{ item[0] }}'
    entity: '{{ item[1] }}'
    etype: user
    permissions: rx
    state: present
  with_nested: '{{ details }}'

- name: Configure the ldap server for SSL / TLS
  when: system.ssl == 'letsencrypt'
  tags: ldap,ssl
  template:
    src: default-slapd
    dest: /etc/default/slapd
  
- name: Copy the ldap ssl config on the server before running it
  when: system.ssl == 'letsencrypt'
  tags: ldap,ssl
  register: ldap_ssl
  template:
    src: ssl-config.ldif
    dest: /tmp/ssl-config.ldif

- name: Modify the configuration if not already done
  when: system.ssl == 'letsencrypt' and ldap_ssl.changed
  tags: ldap,ssl
  command: ldapmodify -QY EXTERNAL -H ldapi:/// -f /tmp/ssl-config.ldif
#                                                                              #
# End of TLS / SSL Configuration ###############################################

- name: Copy the client configuration
  tags: ldap
  template:
    src: ldap.conf
    dest: /etc/ldap/ldap.conf

# Users and groups creation
- name: Make sure we have a parent entry for users
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw: '{{ ldap.admin.password }}'
    dn: '{{ ldap.users.dn }}'
    objectClass: organizationalUnit
    state: present

- name: Make sure we have a parent entry for groups
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw: '{{ ldap.admin.password }}'
    dn: '{{ ldap.groups.dn }}'
    objectClass: organizationalUnit
    state: present

# TODO: Move this to another file / role
# - name: Remove old groups if presents
#   tags: ldap,clean
#   ldap_entry:
#     bind_dn: '{{ ldap.admin.dn }}'
#     bind_pw:  '{{ ldap.admin.password }}'
#     dn: 'cn={{ group.gid }},{{ ldap.groups.dn }}'
#     state: absent
#   with_items:
#     - '{{ posix_groups }}'
#   loop_control:
#     loop_var: group

- name: Create all the group accounts
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ group.gid }},{{ ldap.groups.dn }}'
    attributes:
      cn:  '{{ group.description }}'
      gidNumber: '{{ group.gidNumber }}'
    objectClass:
      - top
      - posixGroup
  with_items:
    - '{{ posix_groups }}'
  loop_control:
    loop_var: group

# TODO: Move this to another file / role
# Create LDAP user accounts
# - name: Remove previous users
#   tags: ldap,clean
#   ldap_entry:
#     bind_dn: '{{ ldap.admin.dn }}'
#     bind_pw:  '{{ ldap.admin.password }}'
#     dn: 'cn={{ user.cn }},{{ ldap.users.dn }}'
#     state: absent
#   with_items:
#     - '{{ users }}'
#   loop_control:
#     loop_var: user

- name: Create all the user accounts
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ user.cn }},{{ ldap.users.dn }}'
    state: present
    attributes:
      uid: '{{ user.uid }}'
      givenName: '{{ user.first_name }}'
      sn: '{{ user.last_name }}'
      userPassword: "{{ user.password }}"
      homeDirectory: '/home/{{ user.group }}/{{ user.uid }}'
      loginShell: '{{ user.shell }}'
      uidNumber: '{{ user.uidNumber }}'
      gidNumber: '{{ user.gidNumber }}'
      mail: '{{ user.mail }}'
      shadowMin: 0
      shadowMax: 999999
      shadowWarning: 7
      shadowInactive: -1
      shadowFlag: 0
    objectClass:
      - top
      - person
      - posixAccount
      - shadowAccount
      - inetOrgPerson
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Add all users to the mail group
  user:
    name: '{{ user.uid }}'
    groups: mail
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Configure libnss to use passwords and groups
  tags: ldap
  debconf:
    name: libnss-ldap
    question: 'libnss-ldapd/nsswitch'
    value: 'passwd, group, shadow'
    vtype: multiselect

- name: Install the required packages for interactive login
  when: options.accounts.login == true
  tags: ldap
  apt:
    name: '{{ item }}'
    state: installed
  with_items:
    - libnss-ldapd
    - libpam-ldapd

- name: Update the ldap configuration file    
  when: options.accounts.login == true
  register: config
  tags: ldap
  template:
    src: nslcd.conf
    dest: /etc/nslcd.conf
    mode: 0600

- name: Restart the nslcd service
  when: config.changed
  tags: ldap
  service:
    name: nslcd
    state: restarted

- name: Create home directory for users on first login
  when: options.accounts.login == true
  tags: ldap
  lineinfile:
    dest: /etc/pam.d/common-account
    line: 'session    required    pam_mkhomedir.so skel=/etc/skel/ umask=0022'
