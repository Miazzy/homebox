---

# Pre-configure the LDAP sever before instaling
- name: Configure the LDAP administration account
  tags: ldap
  debconf:
    name: slapd
    question: '{{ conf.question }}'
    value: '{{ conf.value }}'
    vtype: '{{ conf.type }}'
  with_items:
    - question: slapd/password1
      value: '{{ ldap.admin.password }}'
      type: password
    - question: slapd/password2
      value: '{{ ldap.admin.password }}'
      type: password
    - question: slapd/purge_database
      value: true
      type: boolean
    - question: slapd/invalid_config
      value: false
      type: boolean
    - question: shared/organization
      value: '{{ ldap.organization.domain }}'
      type: string
    - question: slapd/domain
      value: '{{ ldap.organization.domain }}'
      type: string
    - question: slapd/backend
      value: 'MDB'
      type: select
    - question: slapd/move_old_database
      value: true
      type: boolean
    - question: slapd/unsafe_selfwrite_acl
      value: false
      type: boolean
    - question: slapd/password_mismatch
      value: false
      type: boolean
  loop_control:
    loop_var: conf

# Install LDAP server
- name: Install the required packages
  tags: ldap
  apt:
    name: '{{ item }}'
    state: installed
  with_items:
    - acl
    - slapd
    - python-ldap
    - python-passlib
    - ldapscripts
    - nslcd

# Changes in the database will be stored there
- name: Create the ldap config changes folder
  tags: ldap
  file:
    path: /etc/ldap/changes
    state: directory

################################################################################
# At this point, the certificates should have been created already #############
# in order to have SSL and TLS encryption activated.                           #
- name: Allow slapd and nslcd daemons to access the certificate directories
  when: system.ssl == 'letsencrypt'
  tags: ldap,ssl
  notify: Restart the ldap service
  vars:
    details:
      - [ /etc/letsencrypt/archive, /etc/letsencrypt/live ]
      - [ openldap, nslcd ]
  acl:
    path: '{{ item[0] }}'
    entity: '{{ item[1] }}'
    etype: user
    permissions: rx
    state: present
  with_nested: '{{ details }}'

- name: Configure the ldap server for SSL / TLS
  when: system.ssl == 'letsencrypt'
  tags: ldap,ssl
  notify: Restart the ldap service
  template:
    src: default-slapd
    dest: /etc/default/slapd
  
- name: Copy the ldap ssl config on the server before running it
  when: system.ssl == 'letsencrypt'
  tags: ldap,ssl
  notify: Restart the ldap service
  register: ldap_ssl
  template:
    src: ssl-config.ldif
    dest: /etc/ldap/changes/ssl-config.ldif

- name: Modify the configuration if not already done
  when: system.ssl == 'letsencrypt' and ldap_ssl.changed
  tags: ldap,ssl
  notify: Restart the ldap service
  command: ldapmodify -QY EXTERNAL -H ldapi:/// -f /etc/ldap/changes/ssl-config.ldif
#                                                                              #
# End of TLS / SSL Configuration ###############################################

- name: Copy the client configuration
  tags: ldap
  template:
    src: ldap.conf
    dest: /etc/ldap/ldap.conf

# Activate password policies
- name: Copy deref module loading into the changes directory
  tags: ldap
  register: deref_module
  template:
    src: deref-module.ldif
    dest: /etc/ldap/changes/deref-module.ldif

- name: Load deref module into the OLC database
  tags: ldap
  when: deref_module.changed
  command: ldapmodify -QY EXTERNAL -H ldapi:/// -f /etc/ldap/changes/deref-module.ldif

- name: Copy password policies module loading into the changes directory
  tags: ldap
  register: ppolicy_module
  template:
    src: ppolicy-module.ldif
    dest: /etc/ldap/changes/ppolicy-module.ldif

- name: Load password policy module into the OLC database
  tags: ldap
  when: ppolicy_module.changed
  command: ldapmodify -QY EXTERNAL -H ldapi:/// -f /etc/ldap/changes/ppolicy-module.ldif

- name: Copy the password policy schema into the changes directory
  tags: ldap
  register: ppolicy_schema
  copy:
    src: /etc/ldap/schema/ppolicy.ldif
    dest: /etc/ldap/changes/ppolicy-schema.ldif
    remote_src: true

- name: Activate password policies schema
  tags: ldap
  when: ppolicy_schema.changed
  command: ldapadd -QY EXTERNAL -H ldapi:/// -f /etc/ldap/changes/ppolicy-schema.ldif

- name: Copy the overlay into the changes directory
  tags: ldap
  register: ldap_pwd_overlay
  template:
    src: overlay.ldif
    dest: /etc/ldap/changes/overlay.ldif

- name: Load the overlay definition
  tags: ldap
  when: ldap_pwd_overlay.changed
  command: ldapadd -QY EXTERNAL -H ldapi:/// -f /etc/ldap/changes/overlay.ldif

- name: Copy password hash overlay into the changes directory
  tags: ldap
  register: passwd_hash
  template:
    src: password-hash.ldif
    dest: /etc/ldap/changes/password-hash.ldif

- name: Load the password hash overlay
  tags: ldap
  when: passwd_hash.changed
  command: ldapmodify -QY EXTERNAL -H ldapi:/// -f /etc/ldap/changes/password-hash.ldif

# Create a password policy for all the users
- name: Create the password policies parent entry
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw: '{{ ldap.admin.password }}'
    dn: 'ou=pwpolicies,{{ ldap.organization.base }}'
    objectClass:
      - organizationalUnit
      - top
    attributes:
      ou: pwpolicies
    state: present

- name: Create the default password policy
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw: '{{ ldap.admin.password }}'
    dn: cn=default,ou=pwpolicies,{{ ldap.organization.base }}
    objectClass:
      - pwdPolicy
      - person
      - top
    attributes:
      cn: default
      sn: default
      pwdMaxAge: '{{ passwords.max_age }}'
      pwdInHistory: 0
      pwdCheckQuality: 0
      pwdLockoutDuration: 0
      pwdGraceAuthNLimit: 0
      pwdFailureCountInterval: 300
      pwdMinLength: '{{ passwords.min_length }}'
      pwdAttribute: userPassword
      pwdMaxFailure: '{{ passwords.max_failure }}'
      pwdExpireWarning: '{{ passwords.expire_warning }}'

# Users and groups creation
- name: Make sure we have a parent entry for groups
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw: '{{ ldap.admin.password }}'
    dn: '{{ ldap.groups.dn }}'
    objectClass: organizationalUnit
    state: present

# Remove all groups created before
- name: Remove old groups if presents
  tags: ldap
  when: 'clean | default(False) == True'
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ group.gid }},{{ ldap.groups.dn }}'
    state: absent
  with_items:
    - '{{ posix_groups }}'
  loop_control:
    loop_var: group

- name: Create all the group accounts
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ group.gid }},{{ ldap.groups.dn }}'
    attributes:
      cn:  '{{ group.description }}'
      gidNumber: '{{ group.gidNumber }}'
    objectClass:
      - top
      - posixGroup
  with_items:
    - '{{ posix_groups }}'
  loop_control:
    loop_var: group

- name: Make sure we have a parent entry for users
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw: '{{ ldap.admin.password }}'
    dn: '{{ ldap.users.dn }}'
    objectClass: organizationalUnit
    state: present

- name: Remove previous users
  tags: ldap
  when: 'clean | default(False) == True'
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ user.cn }},{{ ldap.users.dn }}'
    state: absent
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Create all the user accounts
  tags: ldap
  ldap_entry:
    bind_dn: '{{ ldap.admin.dn }}'
    bind_pw:  '{{ ldap.admin.password }}'
    dn: 'cn={{ user.cn }},{{ ldap.users.dn }}'
    state: present
    attributes:
      uid: '{{ user.uid }}'
      givenName: '{{ user.first_name }}'
      sn: '{{ user.last_name }}'
      userPassword: "{{ user.password }}"
      pwdPolicySubentry: 'cn=default,ou=pwpolicies,{{ ldap.organization.base }}'
      homeDirectory: '/home/{{ user.group }}/{{ user.uid }}'
      loginShell: '{{ user.shell }}'
      uidNumber: '{{ user.uidNumber }}'
      gidNumber: '{{ user.gidNumber }}'
      mail: '{{ user.mail }}'
      shadowMin: 0
      shadowMax: 999999
      shadowWarning: 7
      shadowInactive: -1
      shadowFlag: 0
    objectClass:
      - top
      - person
      - posixAccount
      - shadowAccount
      - inetOrgPerson
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Configure libnss to use passwords and groups
  tags: ldap
  debconf:
    name: libnss-ldap
    question: 'libnss-ldapd/nsswitch'
    value: 'passwd, group, shadow'
    vtype: multiselect

- name: Install the required packages for interactive login
  tags: ldap
  when: options.accounts.login == true
  apt:
    name: '{{ item }}'
    state: installed
  with_items:
    - libnss-ldapd
    - libpam-ldapd

- name: Update the ldap configuration file    
  tags: ldap
  when: options.accounts.login == true
  notify: Restart the nslcd service
  template:
    src: nslcd.conf
    dest: /etc/nslcd.conf
    mode: 0600

- name: Create the group home folders if necessary
  tags: accounts
  file:
    path: '/home/{{ user.group }}'
    owner: root
    group: '{{ user.group }}'
    state: directory
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Create the user account home folders
  tags: accounts
  file:
    path: '/home/{{ user.group }}/{{ user.uid }}'
    owner: '{{ user.uid }}'
    group: '{{ user.group }}'
    state: directory
  with_items:
    - '{{ users }}'
  loop_control:
    loop_var: user

- name: Create home directory for users on first login
  tags: ldap
  when: options.accounts.login == true
  lineinfile:
    dest: /etc/pam.d/common-account
    line: 'session    required    pam_mkhomedir.so skel=/etc/skel/ umask=0022'
